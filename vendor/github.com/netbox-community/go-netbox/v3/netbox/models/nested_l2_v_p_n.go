// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"math"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedL2VPN nested l2 v p n
//
// swagger:model NestedL2VPN
type NestedL2VPN struct {

	// Display
	// Read Only: true
	Display string `json:"display,omitempty"`

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Identifier
	// Maximum: math.MaxInt64
	// Minimum: math.MinInt64
	Identifier *int64 `json:"identifier,omitempty"`

	// Name
	// Required: true
	// Max Length: 100
	// Min Length: 1
	Name *string `json:"name"`

	// Slug
	// Required: true
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[-a-zA-Z0-9_]+$
	Slug *string `json:"slug"`

	// Type
	// Required: true
	// Enum: [vpws vpls vxlan vxlan-evpn mpls-evpn pbb-evpn epl evpl ep-lan evp-lan ep-tree evp-tree]
	Type *string `json:"type"`

	// Url
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this nested l2 v p n
func (m *NestedL2VPN) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedL2VPN) validateIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.Identifier) { // not required
		return nil
	}

	if err := validate.MinimumInt("identifier", "body", *m.Identifier, math.MinInt64, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("identifier", "body", *m.Identifier, math.MaxInt64, false); err != nil {
		return err
	}

	return nil
}

func (m *NestedL2VPN) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 100); err != nil {
		return err
	}

	return nil
}

func (m *NestedL2VPN) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	if err := validate.MinLength("slug", "body", *m.Slug, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("slug", "body", *m.Slug, 100); err != nil {
		return err
	}

	if err := validate.Pattern("slug", "body", *m.Slug, `^[-a-zA-Z0-9_]+$`); err != nil {
		return err
	}

	return nil
}

var nestedL2VPNTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["vpws","vpls","vxlan","vxlan-evpn","mpls-evpn","pbb-evpn","epl","evpl","ep-lan","evp-lan","ep-tree","evp-tree"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nestedL2VPNTypeTypePropEnum = append(nestedL2VPNTypeTypePropEnum, v)
	}
}

const (

	// NestedL2VPNTypeVpws captures enum value "vpws"
	NestedL2VPNTypeVpws string = "vpws"

	// NestedL2VPNTypeVpls captures enum value "vpls"
	NestedL2VPNTypeVpls string = "vpls"

	// NestedL2VPNTypeVxlan captures enum value "vxlan"
	NestedL2VPNTypeVxlan string = "vxlan"

	// NestedL2VPNTypeVxlanDashEvpn captures enum value "vxlan-evpn"
	NestedL2VPNTypeVxlanDashEvpn string = "vxlan-evpn"

	// NestedL2VPNTypeMplsDashEvpn captures enum value "mpls-evpn"
	NestedL2VPNTypeMplsDashEvpn string = "mpls-evpn"

	// NestedL2VPNTypePbbDashEvpn captures enum value "pbb-evpn"
	NestedL2VPNTypePbbDashEvpn string = "pbb-evpn"

	// NestedL2VPNTypeEpl captures enum value "epl"
	NestedL2VPNTypeEpl string = "epl"

	// NestedL2VPNTypeEvpl captures enum value "evpl"
	NestedL2VPNTypeEvpl string = "evpl"

	// NestedL2VPNTypeEpDashLan captures enum value "ep-lan"
	NestedL2VPNTypeEpDashLan string = "ep-lan"

	// NestedL2VPNTypeEvpDashLan captures enum value "evp-lan"
	NestedL2VPNTypeEvpDashLan string = "evp-lan"

	// NestedL2VPNTypeEpDashTree captures enum value "ep-tree"
	NestedL2VPNTypeEpDashTree string = "ep-tree"

	// NestedL2VPNTypeEvpDashTree captures enum value "evp-tree"
	NestedL2VPNTypeEvpDashTree string = "evp-tree"
)

// prop value enum
func (m *NestedL2VPN) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nestedL2VPNTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NestedL2VPN) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *NestedL2VPN) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this nested l2 v p n based on the context it is used
func (m *NestedL2VPN) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisplay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedL2VPN) contextValidateDisplay(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "display", "body", string(m.Display)); err != nil {
		return err
	}

	return nil
}

func (m *NestedL2VPN) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *NestedL2VPN) contextValidateURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "url", "body", strfmt.URI(m.URL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedL2VPN) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedL2VPN) UnmarshalBinary(b []byte) error {
	var res NestedL2VPN
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
