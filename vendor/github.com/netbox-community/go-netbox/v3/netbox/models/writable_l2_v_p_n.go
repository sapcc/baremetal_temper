// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"math"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WritableL2VPN writable l2 v p n
//
// swagger:model WritableL2VPN
type WritableL2VPN struct {

	// Comments
	Comments string `json:"comments,omitempty"`

	// Created
	// Read Only: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created,omitempty"`

	// Custom fields
	CustomFields interface{} `json:"custom_fields,omitempty"`

	// Description
	// Max Length: 200
	Description string `json:"description,omitempty"`

	// Display
	// Read Only: true
	Display string `json:"display,omitempty"`

	// export targets
	// Unique: true
	ExportTargets []int64 `json:"export_targets"`

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Identifier
	// Maximum: math.MaxInt64
	// Minimum: math.MinInt64
	Identifier *int64 `json:"identifier,omitempty"`

	// import targets
	// Unique: true
	ImportTargets []int64 `json:"import_targets"`

	// Last updated
	// Read Only: true
	// Format: date-time
	LastUpdated *strfmt.DateTime `json:"last_updated,omitempty"`

	// Name
	// Required: true
	// Max Length: 100
	// Min Length: 1
	Name *string `json:"name"`

	// Slug
	// Required: true
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[-a-zA-Z0-9_]+$
	Slug *string `json:"slug"`

	// tags
	Tags []*NestedTag `json:"tags,omitempty"`

	// Tenant
	Tenant *int64 `json:"tenant,omitempty"`

	// Type
	// Required: true
	// Enum: [vpws vpls vxlan vxlan-evpn mpls-evpn pbb-evpn epl evpl ep-lan evp-lan ep-tree evp-tree]
	Type *string `json:"type"`

	// Url
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this writable l2 v p n
func (m *WritableL2VPN) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExportTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WritableL2VPN) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WritableL2VPN) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 200); err != nil {
		return err
	}

	return nil
}

func (m *WritableL2VPN) validateExportTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.ExportTargets) { // not required
		return nil
	}

	if err := validate.UniqueItems("export_targets", "body", m.ExportTargets); err != nil {
		return err
	}

	return nil
}

func (m *WritableL2VPN) validateIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.Identifier) { // not required
		return nil
	}

	if err := validate.MinimumInt("identifier", "body", *m.Identifier, math.MinInt64, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("identifier", "body", *m.Identifier, math.MaxInt64, false); err != nil {
		return err
	}

	return nil
}

func (m *WritableL2VPN) validateImportTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportTargets) { // not required
		return nil
	}

	if err := validate.UniqueItems("import_targets", "body", m.ImportTargets); err != nil {
		return err
	}

	return nil
}

func (m *WritableL2VPN) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WritableL2VPN) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 100); err != nil {
		return err
	}

	return nil
}

func (m *WritableL2VPN) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	if err := validate.MinLength("slug", "body", *m.Slug, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("slug", "body", *m.Slug, 100); err != nil {
		return err
	}

	if err := validate.Pattern("slug", "body", *m.Slug, `^[-a-zA-Z0-9_]+$`); err != nil {
		return err
	}

	return nil
}

func (m *WritableL2VPN) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var writableL2VPNTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["vpws","vpls","vxlan","vxlan-evpn","mpls-evpn","pbb-evpn","epl","evpl","ep-lan","evp-lan","ep-tree","evp-tree"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		writableL2VPNTypeTypePropEnum = append(writableL2VPNTypeTypePropEnum, v)
	}
}

const (

	// WritableL2VPNTypeVpws captures enum value "vpws"
	WritableL2VPNTypeVpws string = "vpws"

	// WritableL2VPNTypeVpls captures enum value "vpls"
	WritableL2VPNTypeVpls string = "vpls"

	// WritableL2VPNTypeVxlan captures enum value "vxlan"
	WritableL2VPNTypeVxlan string = "vxlan"

	// WritableL2VPNTypeVxlanDashEvpn captures enum value "vxlan-evpn"
	WritableL2VPNTypeVxlanDashEvpn string = "vxlan-evpn"

	// WritableL2VPNTypeMplsDashEvpn captures enum value "mpls-evpn"
	WritableL2VPNTypeMplsDashEvpn string = "mpls-evpn"

	// WritableL2VPNTypePbbDashEvpn captures enum value "pbb-evpn"
	WritableL2VPNTypePbbDashEvpn string = "pbb-evpn"

	// WritableL2VPNTypeEpl captures enum value "epl"
	WritableL2VPNTypeEpl string = "epl"

	// WritableL2VPNTypeEvpl captures enum value "evpl"
	WritableL2VPNTypeEvpl string = "evpl"

	// WritableL2VPNTypeEpDashLan captures enum value "ep-lan"
	WritableL2VPNTypeEpDashLan string = "ep-lan"

	// WritableL2VPNTypeEvpDashLan captures enum value "evp-lan"
	WritableL2VPNTypeEvpDashLan string = "evp-lan"

	// WritableL2VPNTypeEpDashTree captures enum value "ep-tree"
	WritableL2VPNTypeEpDashTree string = "ep-tree"

	// WritableL2VPNTypeEvpDashTree captures enum value "evp-tree"
	WritableL2VPNTypeEvpDashTree string = "evp-tree"
)

// prop value enum
func (m *WritableL2VPN) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, writableL2VPNTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WritableL2VPN) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *WritableL2VPN) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this writable l2 v p n based on the context it is used
func (m *WritableL2VPN) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WritableL2VPN) contextValidateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *WritableL2VPN) contextValidateDisplay(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "display", "body", string(m.Display)); err != nil {
		return err
	}

	return nil
}

func (m *WritableL2VPN) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *WritableL2VPN) contextValidateLastUpdated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "last_updated", "body", m.LastUpdated); err != nil {
		return err
	}

	return nil
}

func (m *WritableL2VPN) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WritableL2VPN) contextValidateURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "url", "body", strfmt.URI(m.URL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WritableL2VPN) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WritableL2VPN) UnmarshalBinary(b []byte) error {
	var res WritableL2VPN
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
