// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InterfaceTemplate interface template
//
// swagger:model InterfaceTemplate
type InterfaceTemplate struct {

	// Created
	// Read Only: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created,omitempty"`

	// Description
	// Max Length: 200
	Description string `json:"description,omitempty"`

	// device type
	DeviceType *NestedDeviceType `json:"device_type,omitempty"`

	// Display
	// Read Only: true
	Display string `json:"display,omitempty"`

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Label
	//
	// Physical label
	// Max Length: 64
	Label string `json:"label,omitempty"`

	// Last updated
	// Read Only: true
	// Format: date-time
	LastUpdated *strfmt.DateTime `json:"last_updated,omitempty"`

	// Management only
	MgmtOnly bool `json:"mgmt_only,omitempty"`

	// module type
	ModuleType *NestedModuleType `json:"module_type,omitempty"`

	// Name
	//
	//
	// {module} is accepted as a substitution for the module bay position when attached to a module type.
	//
	// Required: true
	// Max Length: 64
	// Min Length: 1
	Name *string `json:"name"`

	// poe mode
	PoeMode *InterfaceTemplatePoeMode `json:"poe_mode,omitempty"`

	// poe type
	PoeType *InterfaceTemplatePoeType `json:"poe_type,omitempty"`

	// type
	// Required: true
	Type *InterfaceTemplateType `json:"type"`

	// Url
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this interface template
func (m *InterfaceTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModuleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceTemplate) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InterfaceTemplate) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 200); err != nil {
		return err
	}

	return nil
}

func (m *InterfaceTemplate) validateDeviceType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceType) { // not required
		return nil
	}

	if m.DeviceType != nil {
		if err := m.DeviceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_type")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceTemplate) validateLabel(formats strfmt.Registry) error {
	if swag.IsZero(m.Label) { // not required
		return nil
	}

	if err := validate.MaxLength("label", "body", m.Label, 64); err != nil {
		return err
	}

	return nil
}

func (m *InterfaceTemplate) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InterfaceTemplate) validateModuleType(formats strfmt.Registry) error {
	if swag.IsZero(m.ModuleType) { // not required
		return nil
	}

	if m.ModuleType != nil {
		if err := m.ModuleType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("module_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("module_type")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceTemplate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 64); err != nil {
		return err
	}

	return nil
}

func (m *InterfaceTemplate) validatePoeMode(formats strfmt.Registry) error {
	if swag.IsZero(m.PoeMode) { // not required
		return nil
	}

	if m.PoeMode != nil {
		if err := m.PoeMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("poe_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("poe_mode")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceTemplate) validatePoeType(formats strfmt.Registry) error {
	if swag.IsZero(m.PoeType) { // not required
		return nil
	}

	if m.PoeType != nil {
		if err := m.PoeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("poe_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("poe_type")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceTemplate) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceTemplate) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this interface template based on the context it is used
func (m *InterfaceTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModuleType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoeMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceTemplate) contextValidateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *InterfaceTemplate) contextValidateDeviceType(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceType != nil {
		if err := m.DeviceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_type")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceTemplate) contextValidateDisplay(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "display", "body", string(m.Display)); err != nil {
		return err
	}

	return nil
}

func (m *InterfaceTemplate) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *InterfaceTemplate) contextValidateLastUpdated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "last_updated", "body", m.LastUpdated); err != nil {
		return err
	}

	return nil
}

func (m *InterfaceTemplate) contextValidateModuleType(ctx context.Context, formats strfmt.Registry) error {

	if m.ModuleType != nil {
		if err := m.ModuleType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("module_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("module_type")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceTemplate) contextValidatePoeMode(ctx context.Context, formats strfmt.Registry) error {

	if m.PoeMode != nil {
		if err := m.PoeMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("poe_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("poe_mode")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceTemplate) contextValidatePoeType(ctx context.Context, formats strfmt.Registry) error {

	if m.PoeType != nil {
		if err := m.PoeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("poe_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("poe_type")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceTemplate) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *InterfaceTemplate) contextValidateURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "url", "body", strfmt.URI(m.URL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceTemplate) UnmarshalBinary(b []byte) error {
	var res InterfaceTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InterfaceTemplatePoeMode Poe mode
//
// swagger:model InterfaceTemplatePoeMode
type InterfaceTemplatePoeMode struct {

	// label
	// Required: true
	// Enum: [PD PSE]
	Label *string `json:"label"`

	// value
	// Required: true
	// Enum: [pd pse]
	Value *string `json:"value"`
}

// Validate validates this interface template poe mode
func (m *InterfaceTemplatePoeMode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var interfaceTemplatePoeModeTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PD","PSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceTemplatePoeModeTypeLabelPropEnum = append(interfaceTemplatePoeModeTypeLabelPropEnum, v)
	}
}

const (

	// InterfaceTemplatePoeModeLabelPD captures enum value "PD"
	InterfaceTemplatePoeModeLabelPD string = "PD"

	// InterfaceTemplatePoeModeLabelPSE captures enum value "PSE"
	InterfaceTemplatePoeModeLabelPSE string = "PSE"
)

// prop value enum
func (m *InterfaceTemplatePoeMode) validateLabelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceTemplatePoeModeTypeLabelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InterfaceTemplatePoeMode) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("poe_mode"+"."+"label", "body", m.Label); err != nil {
		return err
	}

	// value enum
	if err := m.validateLabelEnum("poe_mode"+"."+"label", "body", *m.Label); err != nil {
		return err
	}

	return nil
}

var interfaceTemplatePoeModeTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pd","pse"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceTemplatePoeModeTypeValuePropEnum = append(interfaceTemplatePoeModeTypeValuePropEnum, v)
	}
}

const (

	// InterfaceTemplatePoeModeValuePd captures enum value "pd"
	InterfaceTemplatePoeModeValuePd string = "pd"

	// InterfaceTemplatePoeModeValuePse captures enum value "pse"
	InterfaceTemplatePoeModeValuePse string = "pse"
)

// prop value enum
func (m *InterfaceTemplatePoeMode) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceTemplatePoeModeTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InterfaceTemplatePoeMode) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("poe_mode"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueEnum("poe_mode"+"."+"value", "body", *m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this interface template poe mode based on context it is used
func (m *InterfaceTemplatePoeMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceTemplatePoeMode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceTemplatePoeMode) UnmarshalBinary(b []byte) error {
	var res InterfaceTemplatePoeMode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InterfaceTemplatePoeType Poe type
//
// swagger:model InterfaceTemplatePoeType
type InterfaceTemplatePoeType struct {

	// label
	// Required: true
	// Enum: [802.3af (Type 1) 802.3at (Type 2) 802.3bt (Type 3) 802.3bt (Type 4) Passive 24V (2-pair) Passive 24V (4-pair) Passive 48V (2-pair) Passive 48V (4-pair)]
	Label *string `json:"label"`

	// value
	// Required: true
	// Enum: [type1-ieee802.3af type2-ieee802.3at type3-ieee802.3bt type4-ieee802.3bt passive-24v-2pair passive-24v-4pair passive-48v-2pair passive-48v-4pair]
	Value *string `json:"value"`
}

// Validate validates this interface template poe type
func (m *InterfaceTemplatePoeType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var interfaceTemplatePoeTypeTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["802.3af (Type 1)","802.3at (Type 2)","802.3bt (Type 3)","802.3bt (Type 4)","Passive 24V (2-pair)","Passive 24V (4-pair)","Passive 48V (2-pair)","Passive 48V (4-pair)"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceTemplatePoeTypeTypeLabelPropEnum = append(interfaceTemplatePoeTypeTypeLabelPropEnum, v)
	}
}

const (

	// InterfaceTemplatePoeTypeLabelNr802Dot3afType1 captures enum value "802.3af (Type 1)"
	InterfaceTemplatePoeTypeLabelNr802Dot3afType1 string = "802.3af (Type 1)"

	// InterfaceTemplatePoeTypeLabelNr802Dot3atType2 captures enum value "802.3at (Type 2)"
	InterfaceTemplatePoeTypeLabelNr802Dot3atType2 string = "802.3at (Type 2)"

	// InterfaceTemplatePoeTypeLabelNr802Dot3btType3 captures enum value "802.3bt (Type 3)"
	InterfaceTemplatePoeTypeLabelNr802Dot3btType3 string = "802.3bt (Type 3)"

	// InterfaceTemplatePoeTypeLabelNr802Dot3btType4 captures enum value "802.3bt (Type 4)"
	InterfaceTemplatePoeTypeLabelNr802Dot3btType4 string = "802.3bt (Type 4)"

	// InterfaceTemplatePoeTypeLabelPassive24V2DashPair captures enum value "Passive 24V (2-pair)"
	InterfaceTemplatePoeTypeLabelPassive24V2DashPair string = "Passive 24V (2-pair)"

	// InterfaceTemplatePoeTypeLabelPassive24V4DashPair captures enum value "Passive 24V (4-pair)"
	InterfaceTemplatePoeTypeLabelPassive24V4DashPair string = "Passive 24V (4-pair)"

	// InterfaceTemplatePoeTypeLabelPassive48V2DashPair captures enum value "Passive 48V (2-pair)"
	InterfaceTemplatePoeTypeLabelPassive48V2DashPair string = "Passive 48V (2-pair)"

	// InterfaceTemplatePoeTypeLabelPassive48V4DashPair captures enum value "Passive 48V (4-pair)"
	InterfaceTemplatePoeTypeLabelPassive48V4DashPair string = "Passive 48V (4-pair)"
)

// prop value enum
func (m *InterfaceTemplatePoeType) validateLabelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceTemplatePoeTypeTypeLabelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InterfaceTemplatePoeType) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("poe_type"+"."+"label", "body", m.Label); err != nil {
		return err
	}

	// value enum
	if err := m.validateLabelEnum("poe_type"+"."+"label", "body", *m.Label); err != nil {
		return err
	}

	return nil
}

var interfaceTemplatePoeTypeTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["type1-ieee802.3af","type2-ieee802.3at","type3-ieee802.3bt","type4-ieee802.3bt","passive-24v-2pair","passive-24v-4pair","passive-48v-2pair","passive-48v-4pair"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceTemplatePoeTypeTypeValuePropEnum = append(interfaceTemplatePoeTypeTypeValuePropEnum, v)
	}
}

const (

	// InterfaceTemplatePoeTypeValueType1DashIeee802Dot3af captures enum value "type1-ieee802.3af"
	InterfaceTemplatePoeTypeValueType1DashIeee802Dot3af string = "type1-ieee802.3af"

	// InterfaceTemplatePoeTypeValueType2DashIeee802Dot3at captures enum value "type2-ieee802.3at"
	InterfaceTemplatePoeTypeValueType2DashIeee802Dot3at string = "type2-ieee802.3at"

	// InterfaceTemplatePoeTypeValueType3DashIeee802Dot3bt captures enum value "type3-ieee802.3bt"
	InterfaceTemplatePoeTypeValueType3DashIeee802Dot3bt string = "type3-ieee802.3bt"

	// InterfaceTemplatePoeTypeValueType4DashIeee802Dot3bt captures enum value "type4-ieee802.3bt"
	InterfaceTemplatePoeTypeValueType4DashIeee802Dot3bt string = "type4-ieee802.3bt"

	// InterfaceTemplatePoeTypeValuePassiveDash24vDash2pair captures enum value "passive-24v-2pair"
	InterfaceTemplatePoeTypeValuePassiveDash24vDash2pair string = "passive-24v-2pair"

	// InterfaceTemplatePoeTypeValuePassiveDash24vDash4pair captures enum value "passive-24v-4pair"
	InterfaceTemplatePoeTypeValuePassiveDash24vDash4pair string = "passive-24v-4pair"

	// InterfaceTemplatePoeTypeValuePassiveDash48vDash2pair captures enum value "passive-48v-2pair"
	InterfaceTemplatePoeTypeValuePassiveDash48vDash2pair string = "passive-48v-2pair"

	// InterfaceTemplatePoeTypeValuePassiveDash48vDash4pair captures enum value "passive-48v-4pair"
	InterfaceTemplatePoeTypeValuePassiveDash48vDash4pair string = "passive-48v-4pair"
)

// prop value enum
func (m *InterfaceTemplatePoeType) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceTemplatePoeTypeTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InterfaceTemplatePoeType) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("poe_type"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueEnum("poe_type"+"."+"value", "body", *m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this interface template poe type based on context it is used
func (m *InterfaceTemplatePoeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceTemplatePoeType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceTemplatePoeType) UnmarshalBinary(b []byte) error {
	var res InterfaceTemplatePoeType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InterfaceTemplateType Type
//
// swagger:model InterfaceTemplateType
type InterfaceTemplateType struct {

	// label
	// Required: true
	// Enum: [Virtual Bridge Link Aggregation Group (LAG) 100BASE-FX (10/100ME FIBER) 100BASE-LFX (10/100ME FIBER) 100BASE-TX (10/100ME) 100BASE-T1 (10/100ME Single Pair) 1000BASE-T (1GE) 2.5GBASE-T (2.5GE) 5GBASE-T (5GE) 10GBASE-T (10GE) 10GBASE-CX4 (10GE) GBIC (1GE) SFP (1GE) SFP+ (10GE) XFP (10GE) XENPAK (10GE) X2 (10GE) SFP28 (25GE) SFP56 (50GE) QSFP+ (40GE) QSFP28 (50GE) CFP (100GE) CFP2 (100GE) CFP2 (200GE) CFP4 (100GE) Cisco CPAK (100GE) QSFP28 (100GE) QSFP56 (200GE) QSFP-DD (400GE) OSFP (400GE) QSFP-DD (800GE) OSFP (800GE) 1000BASE-KX (1GE) 10GBASE-KR (10GE) 10GBASE-KX4 (10GE) 25GBASE-KR (25GE) 40GBASE-KR4 (40GE) 50GBASE-KR (50GE) 100GBASE-KP4 (100GE) 100GBASE-KR2 (100GE) 100GBASE-KR4 (100GE) IEEE 802.11a IEEE 802.11b/g IEEE 802.11n IEEE 802.11ac IEEE 802.11ad IEEE 802.11ax IEEE 802.11ay IEEE 802.15.1 (Bluetooth) Other (Wireless) GSM CDMA LTE OC-3/STM-1 OC-12/STM-4 OC-48/STM-16 OC-192/STM-64 OC-768/STM-256 OC-1920/STM-640 OC-3840/STM-1234 SFP (1GFC) SFP (2GFC) SFP (4GFC) SFP+ (8GFC) SFP+ (16GFC) SFP28 (32GFC) QSFP+ (64GFC) QSFP28 (128GFC) SDR (2 Gbps) DDR (4 Gbps) QDR (8 Gbps) FDR10 (10 Gbps) FDR (13.5 Gbps) EDR (25 Gbps) HDR (50 Gbps) NDR (100 Gbps) XDR (250 Gbps) T1 (1.544 Mbps) E1 (2.048 Mbps) T3 (45 Mbps) E3 (34 Mbps) xDSL DOCSIS GPON (2.5 Gbps / 1.25 Gps) XG-PON (10 Gbps / 2.5 Gbps) XGS-PON (10 Gbps) NG-PON2 (TWDM-PON) (4x10 Gbps) EPON (1 Gbps) 10G-EPON (10 Gbps) Cisco StackWise Cisco StackWise Plus Cisco FlexStack Cisco FlexStack Plus Cisco StackWise-80 Cisco StackWise-160 Cisco StackWise-320 Cisco StackWise-480 Juniper VCP Extreme SummitStack Extreme SummitStack-128 Extreme SummitStack-256 Extreme SummitStack-512 Other]
	Label *string `json:"label"`

	// value
	// Required: true
	// Enum: [virtual bridge lag 100base-fx 100base-lfx 100base-tx 100base-t1 1000base-t 2.5gbase-t 5gbase-t 10gbase-t 10gbase-cx4 1000base-x-gbic 1000base-x-sfp 10gbase-x-sfpp 10gbase-x-xfp 10gbase-x-xenpak 10gbase-x-x2 25gbase-x-sfp28 50gbase-x-sfp56 40gbase-x-qsfpp 50gbase-x-sfp28 100gbase-x-cfp 100gbase-x-cfp2 200gbase-x-cfp2 100gbase-x-cfp4 100gbase-x-cpak 100gbase-x-qsfp28 200gbase-x-qsfp56 400gbase-x-qsfpdd 400gbase-x-osfp 800gbase-x-qsfpdd 800gbase-x-osfp 1000base-kx 10gbase-kr 10gbase-kx4 25gbase-kr 40gbase-kr4 50gbase-kr 100gbase-kp4 100gbase-kr2 100gbase-kr4 ieee802.11a ieee802.11g ieee802.11n ieee802.11ac ieee802.11ad ieee802.11ax ieee802.11ay ieee802.15.1 other-wireless gsm cdma lte sonet-oc3 sonet-oc12 sonet-oc48 sonet-oc192 sonet-oc768 sonet-oc1920 sonet-oc3840 1gfc-sfp 2gfc-sfp 4gfc-sfp 8gfc-sfpp 16gfc-sfpp 32gfc-sfp28 64gfc-qsfpp 128gfc-qsfp28 infiniband-sdr infiniband-ddr infiniband-qdr infiniband-fdr10 infiniband-fdr infiniband-edr infiniband-hdr infiniband-ndr infiniband-xdr t1 e1 t3 e3 xdsl docsis gpon xg-pon xgs-pon ng-pon2 epon 10g-epon cisco-stackwise cisco-stackwise-plus cisco-flexstack cisco-flexstack-plus cisco-stackwise-80 cisco-stackwise-160 cisco-stackwise-320 cisco-stackwise-480 juniper-vcp extreme-summitstack extreme-summitstack-128 extreme-summitstack-256 extreme-summitstack-512 other]
	Value *string `json:"value"`
}

// Validate validates this interface template type
func (m *InterfaceTemplateType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var interfaceTemplateTypeTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Virtual","Bridge","Link Aggregation Group (LAG)","100BASE-FX (10/100ME FIBER)","100BASE-LFX (10/100ME FIBER)","100BASE-TX (10/100ME)","100BASE-T1 (10/100ME Single Pair)","1000BASE-T (1GE)","2.5GBASE-T (2.5GE)","5GBASE-T (5GE)","10GBASE-T (10GE)","10GBASE-CX4 (10GE)","GBIC (1GE)","SFP (1GE)","SFP+ (10GE)","XFP (10GE)","XENPAK (10GE)","X2 (10GE)","SFP28 (25GE)","SFP56 (50GE)","QSFP+ (40GE)","QSFP28 (50GE)","CFP (100GE)","CFP2 (100GE)","CFP2 (200GE)","CFP4 (100GE)","Cisco CPAK (100GE)","QSFP28 (100GE)","QSFP56 (200GE)","QSFP-DD (400GE)","OSFP (400GE)","QSFP-DD (800GE)","OSFP (800GE)","1000BASE-KX (1GE)","10GBASE-KR (10GE)","10GBASE-KX4 (10GE)","25GBASE-KR (25GE)","40GBASE-KR4 (40GE)","50GBASE-KR (50GE)","100GBASE-KP4 (100GE)","100GBASE-KR2 (100GE)","100GBASE-KR4 (100GE)","IEEE 802.11a","IEEE 802.11b/g","IEEE 802.11n","IEEE 802.11ac","IEEE 802.11ad","IEEE 802.11ax","IEEE 802.11ay","IEEE 802.15.1 (Bluetooth)","Other (Wireless)","GSM","CDMA","LTE","OC-3/STM-1","OC-12/STM-4","OC-48/STM-16","OC-192/STM-64","OC-768/STM-256","OC-1920/STM-640","OC-3840/STM-1234","SFP (1GFC)","SFP (2GFC)","SFP (4GFC)","SFP+ (8GFC)","SFP+ (16GFC)","SFP28 (32GFC)","QSFP+ (64GFC)","QSFP28 (128GFC)","SDR (2 Gbps)","DDR (4 Gbps)","QDR (8 Gbps)","FDR10 (10 Gbps)","FDR (13.5 Gbps)","EDR (25 Gbps)","HDR (50 Gbps)","NDR (100 Gbps)","XDR (250 Gbps)","T1 (1.544 Mbps)","E1 (2.048 Mbps)","T3 (45 Mbps)","E3 (34 Mbps)","xDSL","DOCSIS","GPON (2.5 Gbps / 1.25 Gps)","XG-PON (10 Gbps / 2.5 Gbps)","XGS-PON (10 Gbps)","NG-PON2 (TWDM-PON) (4x10 Gbps)","EPON (1 Gbps)","10G-EPON (10 Gbps)","Cisco StackWise","Cisco StackWise Plus","Cisco FlexStack","Cisco FlexStack Plus","Cisco StackWise-80","Cisco StackWise-160","Cisco StackWise-320","Cisco StackWise-480","Juniper VCP","Extreme SummitStack","Extreme SummitStack-128","Extreme SummitStack-256","Extreme SummitStack-512","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceTemplateTypeTypeLabelPropEnum = append(interfaceTemplateTypeTypeLabelPropEnum, v)
	}
}

const (

	// InterfaceTemplateTypeLabelVirtual captures enum value "Virtual"
	InterfaceTemplateTypeLabelVirtual string = "Virtual"

	// InterfaceTemplateTypeLabelBridge captures enum value "Bridge"
	InterfaceTemplateTypeLabelBridge string = "Bridge"

	// InterfaceTemplateTypeLabelLinkAggregationGroupLAG captures enum value "Link Aggregation Group (LAG)"
	InterfaceTemplateTypeLabelLinkAggregationGroupLAG string = "Link Aggregation Group (LAG)"

	// InterfaceTemplateTypeLabelNr100BASEDashFX10100MEFIBER captures enum value "100BASE-FX (10/100ME FIBER)"
	InterfaceTemplateTypeLabelNr100BASEDashFX10100MEFIBER string = "100BASE-FX (10/100ME FIBER)"

	// InterfaceTemplateTypeLabelNr100BASEDashLFX10100MEFIBER captures enum value "100BASE-LFX (10/100ME FIBER)"
	InterfaceTemplateTypeLabelNr100BASEDashLFX10100MEFIBER string = "100BASE-LFX (10/100ME FIBER)"

	// InterfaceTemplateTypeLabelNr100BASEDashTX10100ME captures enum value "100BASE-TX (10/100ME)"
	InterfaceTemplateTypeLabelNr100BASEDashTX10100ME string = "100BASE-TX (10/100ME)"

	// InterfaceTemplateTypeLabelNr100BASEDashT110100MESinglePair captures enum value "100BASE-T1 (10/100ME Single Pair)"
	InterfaceTemplateTypeLabelNr100BASEDashT110100MESinglePair string = "100BASE-T1 (10/100ME Single Pair)"

	// InterfaceTemplateTypeLabelNr1000BASEDashT1GE captures enum value "1000BASE-T (1GE)"
	InterfaceTemplateTypeLabelNr1000BASEDashT1GE string = "1000BASE-T (1GE)"

	// InterfaceTemplateTypeLabelNr2Dot5GBASEDashT2Dot5GE captures enum value "2.5GBASE-T (2.5GE)"
	InterfaceTemplateTypeLabelNr2Dot5GBASEDashT2Dot5GE string = "2.5GBASE-T (2.5GE)"

	// InterfaceTemplateTypeLabelNr5GBASEDashT5GE captures enum value "5GBASE-T (5GE)"
	InterfaceTemplateTypeLabelNr5GBASEDashT5GE string = "5GBASE-T (5GE)"

	// InterfaceTemplateTypeLabelNr10GBASEDashT10GE captures enum value "10GBASE-T (10GE)"
	InterfaceTemplateTypeLabelNr10GBASEDashT10GE string = "10GBASE-T (10GE)"

	// InterfaceTemplateTypeLabelNr10GBASEDashCX410GE captures enum value "10GBASE-CX4 (10GE)"
	InterfaceTemplateTypeLabelNr10GBASEDashCX410GE string = "10GBASE-CX4 (10GE)"

	// InterfaceTemplateTypeLabelGBIC1GE captures enum value "GBIC (1GE)"
	InterfaceTemplateTypeLabelGBIC1GE string = "GBIC (1GE)"

	// InterfaceTemplateTypeLabelSFP1GE captures enum value "SFP (1GE)"
	InterfaceTemplateTypeLabelSFP1GE string = "SFP (1GE)"

	// InterfaceTemplateTypeLabelSFPPlus10GE captures enum value "SFP+ (10GE)"
	InterfaceTemplateTypeLabelSFPPlus10GE string = "SFP+ (10GE)"

	// InterfaceTemplateTypeLabelXFP10GE captures enum value "XFP (10GE)"
	InterfaceTemplateTypeLabelXFP10GE string = "XFP (10GE)"

	// InterfaceTemplateTypeLabelXENPAK10GE captures enum value "XENPAK (10GE)"
	InterfaceTemplateTypeLabelXENPAK10GE string = "XENPAK (10GE)"

	// InterfaceTemplateTypeLabelX210GE captures enum value "X2 (10GE)"
	InterfaceTemplateTypeLabelX210GE string = "X2 (10GE)"

	// InterfaceTemplateTypeLabelSFP2825GE captures enum value "SFP28 (25GE)"
	InterfaceTemplateTypeLabelSFP2825GE string = "SFP28 (25GE)"

	// InterfaceTemplateTypeLabelSFP5650GE captures enum value "SFP56 (50GE)"
	InterfaceTemplateTypeLabelSFP5650GE string = "SFP56 (50GE)"

	// InterfaceTemplateTypeLabelQSFPPlus40GE captures enum value "QSFP+ (40GE)"
	InterfaceTemplateTypeLabelQSFPPlus40GE string = "QSFP+ (40GE)"

	// InterfaceTemplateTypeLabelQSFP2850GE captures enum value "QSFP28 (50GE)"
	InterfaceTemplateTypeLabelQSFP2850GE string = "QSFP28 (50GE)"

	// InterfaceTemplateTypeLabelCFP100GE captures enum value "CFP (100GE)"
	InterfaceTemplateTypeLabelCFP100GE string = "CFP (100GE)"

	// InterfaceTemplateTypeLabelCFP2100GE captures enum value "CFP2 (100GE)"
	InterfaceTemplateTypeLabelCFP2100GE string = "CFP2 (100GE)"

	// InterfaceTemplateTypeLabelCFP2200GE captures enum value "CFP2 (200GE)"
	InterfaceTemplateTypeLabelCFP2200GE string = "CFP2 (200GE)"

	// InterfaceTemplateTypeLabelCFP4100GE captures enum value "CFP4 (100GE)"
	InterfaceTemplateTypeLabelCFP4100GE string = "CFP4 (100GE)"

	// InterfaceTemplateTypeLabelCiscoCPAK100GE captures enum value "Cisco CPAK (100GE)"
	InterfaceTemplateTypeLabelCiscoCPAK100GE string = "Cisco CPAK (100GE)"

	// InterfaceTemplateTypeLabelQSFP28100GE captures enum value "QSFP28 (100GE)"
	InterfaceTemplateTypeLabelQSFP28100GE string = "QSFP28 (100GE)"

	// InterfaceTemplateTypeLabelQSFP56200GE captures enum value "QSFP56 (200GE)"
	InterfaceTemplateTypeLabelQSFP56200GE string = "QSFP56 (200GE)"

	// InterfaceTemplateTypeLabelQSFPDashDD400GE captures enum value "QSFP-DD (400GE)"
	InterfaceTemplateTypeLabelQSFPDashDD400GE string = "QSFP-DD (400GE)"

	// InterfaceTemplateTypeLabelOSFP400GE captures enum value "OSFP (400GE)"
	InterfaceTemplateTypeLabelOSFP400GE string = "OSFP (400GE)"

	// InterfaceTemplateTypeLabelQSFPDashDD800GE captures enum value "QSFP-DD (800GE)"
	InterfaceTemplateTypeLabelQSFPDashDD800GE string = "QSFP-DD (800GE)"

	// InterfaceTemplateTypeLabelOSFP800GE captures enum value "OSFP (800GE)"
	InterfaceTemplateTypeLabelOSFP800GE string = "OSFP (800GE)"

	// InterfaceTemplateTypeLabelNr1000BASEDashKX1GE captures enum value "1000BASE-KX (1GE)"
	InterfaceTemplateTypeLabelNr1000BASEDashKX1GE string = "1000BASE-KX (1GE)"

	// InterfaceTemplateTypeLabelNr10GBASEDashKR10GE captures enum value "10GBASE-KR (10GE)"
	InterfaceTemplateTypeLabelNr10GBASEDashKR10GE string = "10GBASE-KR (10GE)"

	// InterfaceTemplateTypeLabelNr10GBASEDashKX410GE captures enum value "10GBASE-KX4 (10GE)"
	InterfaceTemplateTypeLabelNr10GBASEDashKX410GE string = "10GBASE-KX4 (10GE)"

	// InterfaceTemplateTypeLabelNr25GBASEDashKR25GE captures enum value "25GBASE-KR (25GE)"
	InterfaceTemplateTypeLabelNr25GBASEDashKR25GE string = "25GBASE-KR (25GE)"

	// InterfaceTemplateTypeLabelNr40GBASEDashKR440GE captures enum value "40GBASE-KR4 (40GE)"
	InterfaceTemplateTypeLabelNr40GBASEDashKR440GE string = "40GBASE-KR4 (40GE)"

	// InterfaceTemplateTypeLabelNr50GBASEDashKR50GE captures enum value "50GBASE-KR (50GE)"
	InterfaceTemplateTypeLabelNr50GBASEDashKR50GE string = "50GBASE-KR (50GE)"

	// InterfaceTemplateTypeLabelNr100GBASEDashKP4100GE captures enum value "100GBASE-KP4 (100GE)"
	InterfaceTemplateTypeLabelNr100GBASEDashKP4100GE string = "100GBASE-KP4 (100GE)"

	// InterfaceTemplateTypeLabelNr100GBASEDashKR2100GE captures enum value "100GBASE-KR2 (100GE)"
	InterfaceTemplateTypeLabelNr100GBASEDashKR2100GE string = "100GBASE-KR2 (100GE)"

	// InterfaceTemplateTypeLabelNr100GBASEDashKR4100GE captures enum value "100GBASE-KR4 (100GE)"
	InterfaceTemplateTypeLabelNr100GBASEDashKR4100GE string = "100GBASE-KR4 (100GE)"

	// InterfaceTemplateTypeLabelIEEE802Dot11a captures enum value "IEEE 802.11a"
	InterfaceTemplateTypeLabelIEEE802Dot11a string = "IEEE 802.11a"

	// InterfaceTemplateTypeLabelIEEE802Dot11bg captures enum value "IEEE 802.11b/g"
	InterfaceTemplateTypeLabelIEEE802Dot11bg string = "IEEE 802.11b/g"

	// InterfaceTemplateTypeLabelIEEE802Dot11n captures enum value "IEEE 802.11n"
	InterfaceTemplateTypeLabelIEEE802Dot11n string = "IEEE 802.11n"

	// InterfaceTemplateTypeLabelIEEE802Dot11ac captures enum value "IEEE 802.11ac"
	InterfaceTemplateTypeLabelIEEE802Dot11ac string = "IEEE 802.11ac"

	// InterfaceTemplateTypeLabelIEEE802Dot11ad captures enum value "IEEE 802.11ad"
	InterfaceTemplateTypeLabelIEEE802Dot11ad string = "IEEE 802.11ad"

	// InterfaceTemplateTypeLabelIEEE802Dot11ax captures enum value "IEEE 802.11ax"
	InterfaceTemplateTypeLabelIEEE802Dot11ax string = "IEEE 802.11ax"

	// InterfaceTemplateTypeLabelIEEE802Dot11ay captures enum value "IEEE 802.11ay"
	InterfaceTemplateTypeLabelIEEE802Dot11ay string = "IEEE 802.11ay"

	// InterfaceTemplateTypeLabelIEEE802Dot15Dot1Bluetooth captures enum value "IEEE 802.15.1 (Bluetooth)"
	InterfaceTemplateTypeLabelIEEE802Dot15Dot1Bluetooth string = "IEEE 802.15.1 (Bluetooth)"

	// InterfaceTemplateTypeLabelOtherWireless captures enum value "Other (Wireless)"
	InterfaceTemplateTypeLabelOtherWireless string = "Other (Wireless)"

	// InterfaceTemplateTypeLabelGSM captures enum value "GSM"
	InterfaceTemplateTypeLabelGSM string = "GSM"

	// InterfaceTemplateTypeLabelCDMA captures enum value "CDMA"
	InterfaceTemplateTypeLabelCDMA string = "CDMA"

	// InterfaceTemplateTypeLabelLTE captures enum value "LTE"
	InterfaceTemplateTypeLabelLTE string = "LTE"

	// InterfaceTemplateTypeLabelOCDash3STMDash1 captures enum value "OC-3/STM-1"
	InterfaceTemplateTypeLabelOCDash3STMDash1 string = "OC-3/STM-1"

	// InterfaceTemplateTypeLabelOCDash12STMDash4 captures enum value "OC-12/STM-4"
	InterfaceTemplateTypeLabelOCDash12STMDash4 string = "OC-12/STM-4"

	// InterfaceTemplateTypeLabelOCDash48STMDash16 captures enum value "OC-48/STM-16"
	InterfaceTemplateTypeLabelOCDash48STMDash16 string = "OC-48/STM-16"

	// InterfaceTemplateTypeLabelOCDash192STMDash64 captures enum value "OC-192/STM-64"
	InterfaceTemplateTypeLabelOCDash192STMDash64 string = "OC-192/STM-64"

	// InterfaceTemplateTypeLabelOCDash768STMDash256 captures enum value "OC-768/STM-256"
	InterfaceTemplateTypeLabelOCDash768STMDash256 string = "OC-768/STM-256"

	// InterfaceTemplateTypeLabelOCDash1920STMDash640 captures enum value "OC-1920/STM-640"
	InterfaceTemplateTypeLabelOCDash1920STMDash640 string = "OC-1920/STM-640"

	// InterfaceTemplateTypeLabelOCDash3840STMDash1234 captures enum value "OC-3840/STM-1234"
	InterfaceTemplateTypeLabelOCDash3840STMDash1234 string = "OC-3840/STM-1234"

	// InterfaceTemplateTypeLabelSFP1GFC captures enum value "SFP (1GFC)"
	InterfaceTemplateTypeLabelSFP1GFC string = "SFP (1GFC)"

	// InterfaceTemplateTypeLabelSFP2GFC captures enum value "SFP (2GFC)"
	InterfaceTemplateTypeLabelSFP2GFC string = "SFP (2GFC)"

	// InterfaceTemplateTypeLabelSFP4GFC captures enum value "SFP (4GFC)"
	InterfaceTemplateTypeLabelSFP4GFC string = "SFP (4GFC)"

	// InterfaceTemplateTypeLabelSFPPlus8GFC captures enum value "SFP+ (8GFC)"
	InterfaceTemplateTypeLabelSFPPlus8GFC string = "SFP+ (8GFC)"

	// InterfaceTemplateTypeLabelSFPPlus16GFC captures enum value "SFP+ (16GFC)"
	InterfaceTemplateTypeLabelSFPPlus16GFC string = "SFP+ (16GFC)"

	// InterfaceTemplateTypeLabelSFP2832GFC captures enum value "SFP28 (32GFC)"
	InterfaceTemplateTypeLabelSFP2832GFC string = "SFP28 (32GFC)"

	// InterfaceTemplateTypeLabelQSFPPlus64GFC captures enum value "QSFP+ (64GFC)"
	InterfaceTemplateTypeLabelQSFPPlus64GFC string = "QSFP+ (64GFC)"

	// InterfaceTemplateTypeLabelQSFP28128GFC captures enum value "QSFP28 (128GFC)"
	InterfaceTemplateTypeLabelQSFP28128GFC string = "QSFP28 (128GFC)"

	// InterfaceTemplateTypeLabelSDR2Gbps captures enum value "SDR (2 Gbps)"
	InterfaceTemplateTypeLabelSDR2Gbps string = "SDR (2 Gbps)"

	// InterfaceTemplateTypeLabelDDR4Gbps captures enum value "DDR (4 Gbps)"
	InterfaceTemplateTypeLabelDDR4Gbps string = "DDR (4 Gbps)"

	// InterfaceTemplateTypeLabelQDR8Gbps captures enum value "QDR (8 Gbps)"
	InterfaceTemplateTypeLabelQDR8Gbps string = "QDR (8 Gbps)"

	// InterfaceTemplateTypeLabelFDR1010Gbps captures enum value "FDR10 (10 Gbps)"
	InterfaceTemplateTypeLabelFDR1010Gbps string = "FDR10 (10 Gbps)"

	// InterfaceTemplateTypeLabelFDR13Dot5Gbps captures enum value "FDR (13.5 Gbps)"
	InterfaceTemplateTypeLabelFDR13Dot5Gbps string = "FDR (13.5 Gbps)"

	// InterfaceTemplateTypeLabelEDR25Gbps captures enum value "EDR (25 Gbps)"
	InterfaceTemplateTypeLabelEDR25Gbps string = "EDR (25 Gbps)"

	// InterfaceTemplateTypeLabelHDR50Gbps captures enum value "HDR (50 Gbps)"
	InterfaceTemplateTypeLabelHDR50Gbps string = "HDR (50 Gbps)"

	// InterfaceTemplateTypeLabelNDR100Gbps captures enum value "NDR (100 Gbps)"
	InterfaceTemplateTypeLabelNDR100Gbps string = "NDR (100 Gbps)"

	// InterfaceTemplateTypeLabelXDR250Gbps captures enum value "XDR (250 Gbps)"
	InterfaceTemplateTypeLabelXDR250Gbps string = "XDR (250 Gbps)"

	// InterfaceTemplateTypeLabelT11Dot544Mbps captures enum value "T1 (1.544 Mbps)"
	InterfaceTemplateTypeLabelT11Dot544Mbps string = "T1 (1.544 Mbps)"

	// InterfaceTemplateTypeLabelE12Dot048Mbps captures enum value "E1 (2.048 Mbps)"
	InterfaceTemplateTypeLabelE12Dot048Mbps string = "E1 (2.048 Mbps)"

	// InterfaceTemplateTypeLabelT345Mbps captures enum value "T3 (45 Mbps)"
	InterfaceTemplateTypeLabelT345Mbps string = "T3 (45 Mbps)"

	// InterfaceTemplateTypeLabelE334Mbps captures enum value "E3 (34 Mbps)"
	InterfaceTemplateTypeLabelE334Mbps string = "E3 (34 Mbps)"

	// InterfaceTemplateTypeLabelXDSL captures enum value "xDSL"
	InterfaceTemplateTypeLabelXDSL string = "xDSL"

	// InterfaceTemplateTypeLabelDOCSIS captures enum value "DOCSIS"
	InterfaceTemplateTypeLabelDOCSIS string = "DOCSIS"

	// InterfaceTemplateTypeLabelGPON2Dot5Gbps1Dot25Gps captures enum value "GPON (2.5 Gbps / 1.25 Gps)"
	InterfaceTemplateTypeLabelGPON2Dot5Gbps1Dot25Gps string = "GPON (2.5 Gbps / 1.25 Gps)"

	// InterfaceTemplateTypeLabelXGDashPON10Gbps2Dot5Gbps captures enum value "XG-PON (10 Gbps / 2.5 Gbps)"
	InterfaceTemplateTypeLabelXGDashPON10Gbps2Dot5Gbps string = "XG-PON (10 Gbps / 2.5 Gbps)"

	// InterfaceTemplateTypeLabelXGSDashPON10Gbps captures enum value "XGS-PON (10 Gbps)"
	InterfaceTemplateTypeLabelXGSDashPON10Gbps string = "XGS-PON (10 Gbps)"

	// InterfaceTemplateTypeLabelNGDashPON2TWDMDashPON4x10Gbps captures enum value "NG-PON2 (TWDM-PON) (4x10 Gbps)"
	InterfaceTemplateTypeLabelNGDashPON2TWDMDashPON4x10Gbps string = "NG-PON2 (TWDM-PON) (4x10 Gbps)"

	// InterfaceTemplateTypeLabelEPON1Gbps captures enum value "EPON (1 Gbps)"
	InterfaceTemplateTypeLabelEPON1Gbps string = "EPON (1 Gbps)"

	// InterfaceTemplateTypeLabelNr10GDashEPON10Gbps captures enum value "10G-EPON (10 Gbps)"
	InterfaceTemplateTypeLabelNr10GDashEPON10Gbps string = "10G-EPON (10 Gbps)"

	// InterfaceTemplateTypeLabelCiscoStackWise captures enum value "Cisco StackWise"
	InterfaceTemplateTypeLabelCiscoStackWise string = "Cisco StackWise"

	// InterfaceTemplateTypeLabelCiscoStackWisePlus captures enum value "Cisco StackWise Plus"
	InterfaceTemplateTypeLabelCiscoStackWisePlus string = "Cisco StackWise Plus"

	// InterfaceTemplateTypeLabelCiscoFlexStack captures enum value "Cisco FlexStack"
	InterfaceTemplateTypeLabelCiscoFlexStack string = "Cisco FlexStack"

	// InterfaceTemplateTypeLabelCiscoFlexStackPlus captures enum value "Cisco FlexStack Plus"
	InterfaceTemplateTypeLabelCiscoFlexStackPlus string = "Cisco FlexStack Plus"

	// InterfaceTemplateTypeLabelCiscoStackWiseDash80 captures enum value "Cisco StackWise-80"
	InterfaceTemplateTypeLabelCiscoStackWiseDash80 string = "Cisco StackWise-80"

	// InterfaceTemplateTypeLabelCiscoStackWiseDash160 captures enum value "Cisco StackWise-160"
	InterfaceTemplateTypeLabelCiscoStackWiseDash160 string = "Cisco StackWise-160"

	// InterfaceTemplateTypeLabelCiscoStackWiseDash320 captures enum value "Cisco StackWise-320"
	InterfaceTemplateTypeLabelCiscoStackWiseDash320 string = "Cisco StackWise-320"

	// InterfaceTemplateTypeLabelCiscoStackWiseDash480 captures enum value "Cisco StackWise-480"
	InterfaceTemplateTypeLabelCiscoStackWiseDash480 string = "Cisco StackWise-480"

	// InterfaceTemplateTypeLabelJuniperVCP captures enum value "Juniper VCP"
	InterfaceTemplateTypeLabelJuniperVCP string = "Juniper VCP"

	// InterfaceTemplateTypeLabelExtremeSummitStack captures enum value "Extreme SummitStack"
	InterfaceTemplateTypeLabelExtremeSummitStack string = "Extreme SummitStack"

	// InterfaceTemplateTypeLabelExtremeSummitStackDash128 captures enum value "Extreme SummitStack-128"
	InterfaceTemplateTypeLabelExtremeSummitStackDash128 string = "Extreme SummitStack-128"

	// InterfaceTemplateTypeLabelExtremeSummitStackDash256 captures enum value "Extreme SummitStack-256"
	InterfaceTemplateTypeLabelExtremeSummitStackDash256 string = "Extreme SummitStack-256"

	// InterfaceTemplateTypeLabelExtremeSummitStackDash512 captures enum value "Extreme SummitStack-512"
	InterfaceTemplateTypeLabelExtremeSummitStackDash512 string = "Extreme SummitStack-512"

	// InterfaceTemplateTypeLabelOther captures enum value "Other"
	InterfaceTemplateTypeLabelOther string = "Other"
)

// prop value enum
func (m *InterfaceTemplateType) validateLabelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceTemplateTypeTypeLabelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InterfaceTemplateType) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("type"+"."+"label", "body", m.Label); err != nil {
		return err
	}

	// value enum
	if err := m.validateLabelEnum("type"+"."+"label", "body", *m.Label); err != nil {
		return err
	}

	return nil
}

var interfaceTemplateTypeTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["virtual","bridge","lag","100base-fx","100base-lfx","100base-tx","100base-t1","1000base-t","2.5gbase-t","5gbase-t","10gbase-t","10gbase-cx4","1000base-x-gbic","1000base-x-sfp","10gbase-x-sfpp","10gbase-x-xfp","10gbase-x-xenpak","10gbase-x-x2","25gbase-x-sfp28","50gbase-x-sfp56","40gbase-x-qsfpp","50gbase-x-sfp28","100gbase-x-cfp","100gbase-x-cfp2","200gbase-x-cfp2","100gbase-x-cfp4","100gbase-x-cpak","100gbase-x-qsfp28","200gbase-x-qsfp56","400gbase-x-qsfpdd","400gbase-x-osfp","800gbase-x-qsfpdd","800gbase-x-osfp","1000base-kx","10gbase-kr","10gbase-kx4","25gbase-kr","40gbase-kr4","50gbase-kr","100gbase-kp4","100gbase-kr2","100gbase-kr4","ieee802.11a","ieee802.11g","ieee802.11n","ieee802.11ac","ieee802.11ad","ieee802.11ax","ieee802.11ay","ieee802.15.1","other-wireless","gsm","cdma","lte","sonet-oc3","sonet-oc12","sonet-oc48","sonet-oc192","sonet-oc768","sonet-oc1920","sonet-oc3840","1gfc-sfp","2gfc-sfp","4gfc-sfp","8gfc-sfpp","16gfc-sfpp","32gfc-sfp28","64gfc-qsfpp","128gfc-qsfp28","infiniband-sdr","infiniband-ddr","infiniband-qdr","infiniband-fdr10","infiniband-fdr","infiniband-edr","infiniband-hdr","infiniband-ndr","infiniband-xdr","t1","e1","t3","e3","xdsl","docsis","gpon","xg-pon","xgs-pon","ng-pon2","epon","10g-epon","cisco-stackwise","cisco-stackwise-plus","cisco-flexstack","cisco-flexstack-plus","cisco-stackwise-80","cisco-stackwise-160","cisco-stackwise-320","cisco-stackwise-480","juniper-vcp","extreme-summitstack","extreme-summitstack-128","extreme-summitstack-256","extreme-summitstack-512","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceTemplateTypeTypeValuePropEnum = append(interfaceTemplateTypeTypeValuePropEnum, v)
	}
}

const (

	// InterfaceTemplateTypeValueVirtual captures enum value "virtual"
	InterfaceTemplateTypeValueVirtual string = "virtual"

	// InterfaceTemplateTypeValueBridge captures enum value "bridge"
	InterfaceTemplateTypeValueBridge string = "bridge"

	// InterfaceTemplateTypeValueLag captures enum value "lag"
	InterfaceTemplateTypeValueLag string = "lag"

	// InterfaceTemplateTypeValueNr100baseDashFx captures enum value "100base-fx"
	InterfaceTemplateTypeValueNr100baseDashFx string = "100base-fx"

	// InterfaceTemplateTypeValueNr100baseDashLfx captures enum value "100base-lfx"
	InterfaceTemplateTypeValueNr100baseDashLfx string = "100base-lfx"

	// InterfaceTemplateTypeValueNr100baseDashTx captures enum value "100base-tx"
	InterfaceTemplateTypeValueNr100baseDashTx string = "100base-tx"

	// InterfaceTemplateTypeValueNr100baseDashT1 captures enum value "100base-t1"
	InterfaceTemplateTypeValueNr100baseDashT1 string = "100base-t1"

	// InterfaceTemplateTypeValueNr1000baseDasht captures enum value "1000base-t"
	InterfaceTemplateTypeValueNr1000baseDasht string = "1000base-t"

	// InterfaceTemplateTypeValueNr2Dot5gbaseDasht captures enum value "2.5gbase-t"
	InterfaceTemplateTypeValueNr2Dot5gbaseDasht string = "2.5gbase-t"

	// InterfaceTemplateTypeValueNr5gbaseDasht captures enum value "5gbase-t"
	InterfaceTemplateTypeValueNr5gbaseDasht string = "5gbase-t"

	// InterfaceTemplateTypeValueNr10gbaseDasht captures enum value "10gbase-t"
	InterfaceTemplateTypeValueNr10gbaseDasht string = "10gbase-t"

	// InterfaceTemplateTypeValueNr10gbaseDashCx4 captures enum value "10gbase-cx4"
	InterfaceTemplateTypeValueNr10gbaseDashCx4 string = "10gbase-cx4"

	// InterfaceTemplateTypeValueNr1000baseDashxDashGbic captures enum value "1000base-x-gbic"
	InterfaceTemplateTypeValueNr1000baseDashxDashGbic string = "1000base-x-gbic"

	// InterfaceTemplateTypeValueNr1000baseDashxDashSfp captures enum value "1000base-x-sfp"
	InterfaceTemplateTypeValueNr1000baseDashxDashSfp string = "1000base-x-sfp"

	// InterfaceTemplateTypeValueNr10gbaseDashxDashSfpp captures enum value "10gbase-x-sfpp"
	InterfaceTemplateTypeValueNr10gbaseDashxDashSfpp string = "10gbase-x-sfpp"

	// InterfaceTemplateTypeValueNr10gbaseDashxDashXfp captures enum value "10gbase-x-xfp"
	InterfaceTemplateTypeValueNr10gbaseDashxDashXfp string = "10gbase-x-xfp"

	// InterfaceTemplateTypeValueNr10gbaseDashxDashXenpak captures enum value "10gbase-x-xenpak"
	InterfaceTemplateTypeValueNr10gbaseDashxDashXenpak string = "10gbase-x-xenpak"

	// InterfaceTemplateTypeValueNr10gbaseDashxDashX2 captures enum value "10gbase-x-x2"
	InterfaceTemplateTypeValueNr10gbaseDashxDashX2 string = "10gbase-x-x2"

	// InterfaceTemplateTypeValueNr25gbaseDashxDashSfp28 captures enum value "25gbase-x-sfp28"
	InterfaceTemplateTypeValueNr25gbaseDashxDashSfp28 string = "25gbase-x-sfp28"

	// InterfaceTemplateTypeValueNr50gbaseDashxDashSfp56 captures enum value "50gbase-x-sfp56"
	InterfaceTemplateTypeValueNr50gbaseDashxDashSfp56 string = "50gbase-x-sfp56"

	// InterfaceTemplateTypeValueNr40gbaseDashxDashQsfpp captures enum value "40gbase-x-qsfpp"
	InterfaceTemplateTypeValueNr40gbaseDashxDashQsfpp string = "40gbase-x-qsfpp"

	// InterfaceTemplateTypeValueNr50gbaseDashxDashSfp28 captures enum value "50gbase-x-sfp28"
	InterfaceTemplateTypeValueNr50gbaseDashxDashSfp28 string = "50gbase-x-sfp28"

	// InterfaceTemplateTypeValueNr100gbaseDashxDashCfp captures enum value "100gbase-x-cfp"
	InterfaceTemplateTypeValueNr100gbaseDashxDashCfp string = "100gbase-x-cfp"

	// InterfaceTemplateTypeValueNr100gbaseDashxDashCfp2 captures enum value "100gbase-x-cfp2"
	InterfaceTemplateTypeValueNr100gbaseDashxDashCfp2 string = "100gbase-x-cfp2"

	// InterfaceTemplateTypeValueNr200gbaseDashxDashCfp2 captures enum value "200gbase-x-cfp2"
	InterfaceTemplateTypeValueNr200gbaseDashxDashCfp2 string = "200gbase-x-cfp2"

	// InterfaceTemplateTypeValueNr100gbaseDashxDashCfp4 captures enum value "100gbase-x-cfp4"
	InterfaceTemplateTypeValueNr100gbaseDashxDashCfp4 string = "100gbase-x-cfp4"

	// InterfaceTemplateTypeValueNr100gbaseDashxDashCpak captures enum value "100gbase-x-cpak"
	InterfaceTemplateTypeValueNr100gbaseDashxDashCpak string = "100gbase-x-cpak"

	// InterfaceTemplateTypeValueNr100gbaseDashxDashQsfp28 captures enum value "100gbase-x-qsfp28"
	InterfaceTemplateTypeValueNr100gbaseDashxDashQsfp28 string = "100gbase-x-qsfp28"

	// InterfaceTemplateTypeValueNr200gbaseDashxDashQsfp56 captures enum value "200gbase-x-qsfp56"
	InterfaceTemplateTypeValueNr200gbaseDashxDashQsfp56 string = "200gbase-x-qsfp56"

	// InterfaceTemplateTypeValueNr400gbaseDashxDashQsfpdd captures enum value "400gbase-x-qsfpdd"
	InterfaceTemplateTypeValueNr400gbaseDashxDashQsfpdd string = "400gbase-x-qsfpdd"

	// InterfaceTemplateTypeValueNr400gbaseDashxDashOsfp captures enum value "400gbase-x-osfp"
	InterfaceTemplateTypeValueNr400gbaseDashxDashOsfp string = "400gbase-x-osfp"

	// InterfaceTemplateTypeValueNr800gbaseDashxDashQsfpdd captures enum value "800gbase-x-qsfpdd"
	InterfaceTemplateTypeValueNr800gbaseDashxDashQsfpdd string = "800gbase-x-qsfpdd"

	// InterfaceTemplateTypeValueNr800gbaseDashxDashOsfp captures enum value "800gbase-x-osfp"
	InterfaceTemplateTypeValueNr800gbaseDashxDashOsfp string = "800gbase-x-osfp"

	// InterfaceTemplateTypeValueNr1000baseDashKx captures enum value "1000base-kx"
	InterfaceTemplateTypeValueNr1000baseDashKx string = "1000base-kx"

	// InterfaceTemplateTypeValueNr10gbaseDashKr captures enum value "10gbase-kr"
	InterfaceTemplateTypeValueNr10gbaseDashKr string = "10gbase-kr"

	// InterfaceTemplateTypeValueNr10gbaseDashKx4 captures enum value "10gbase-kx4"
	InterfaceTemplateTypeValueNr10gbaseDashKx4 string = "10gbase-kx4"

	// InterfaceTemplateTypeValueNr25gbaseDashKr captures enum value "25gbase-kr"
	InterfaceTemplateTypeValueNr25gbaseDashKr string = "25gbase-kr"

	// InterfaceTemplateTypeValueNr40gbaseDashKr4 captures enum value "40gbase-kr4"
	InterfaceTemplateTypeValueNr40gbaseDashKr4 string = "40gbase-kr4"

	// InterfaceTemplateTypeValueNr50gbaseDashKr captures enum value "50gbase-kr"
	InterfaceTemplateTypeValueNr50gbaseDashKr string = "50gbase-kr"

	// InterfaceTemplateTypeValueNr100gbaseDashKp4 captures enum value "100gbase-kp4"
	InterfaceTemplateTypeValueNr100gbaseDashKp4 string = "100gbase-kp4"

	// InterfaceTemplateTypeValueNr100gbaseDashKr2 captures enum value "100gbase-kr2"
	InterfaceTemplateTypeValueNr100gbaseDashKr2 string = "100gbase-kr2"

	// InterfaceTemplateTypeValueNr100gbaseDashKr4 captures enum value "100gbase-kr4"
	InterfaceTemplateTypeValueNr100gbaseDashKr4 string = "100gbase-kr4"

	// InterfaceTemplateTypeValueIeee802Dot11a captures enum value "ieee802.11a"
	InterfaceTemplateTypeValueIeee802Dot11a string = "ieee802.11a"

	// InterfaceTemplateTypeValueIeee802Dot11g captures enum value "ieee802.11g"
	InterfaceTemplateTypeValueIeee802Dot11g string = "ieee802.11g"

	// InterfaceTemplateTypeValueIeee802Dot11n captures enum value "ieee802.11n"
	InterfaceTemplateTypeValueIeee802Dot11n string = "ieee802.11n"

	// InterfaceTemplateTypeValueIeee802Dot11ac captures enum value "ieee802.11ac"
	InterfaceTemplateTypeValueIeee802Dot11ac string = "ieee802.11ac"

	// InterfaceTemplateTypeValueIeee802Dot11ad captures enum value "ieee802.11ad"
	InterfaceTemplateTypeValueIeee802Dot11ad string = "ieee802.11ad"

	// InterfaceTemplateTypeValueIeee802Dot11ax captures enum value "ieee802.11ax"
	InterfaceTemplateTypeValueIeee802Dot11ax string = "ieee802.11ax"

	// InterfaceTemplateTypeValueIeee802Dot11ay captures enum value "ieee802.11ay"
	InterfaceTemplateTypeValueIeee802Dot11ay string = "ieee802.11ay"

	// InterfaceTemplateTypeValueIeee802Dot15Dot1 captures enum value "ieee802.15.1"
	InterfaceTemplateTypeValueIeee802Dot15Dot1 string = "ieee802.15.1"

	// InterfaceTemplateTypeValueOtherDashWireless captures enum value "other-wireless"
	InterfaceTemplateTypeValueOtherDashWireless string = "other-wireless"

	// InterfaceTemplateTypeValueGsm captures enum value "gsm"
	InterfaceTemplateTypeValueGsm string = "gsm"

	// InterfaceTemplateTypeValueCdma captures enum value "cdma"
	InterfaceTemplateTypeValueCdma string = "cdma"

	// InterfaceTemplateTypeValueLte captures enum value "lte"
	InterfaceTemplateTypeValueLte string = "lte"

	// InterfaceTemplateTypeValueSonetDashOc3 captures enum value "sonet-oc3"
	InterfaceTemplateTypeValueSonetDashOc3 string = "sonet-oc3"

	// InterfaceTemplateTypeValueSonetDashOc12 captures enum value "sonet-oc12"
	InterfaceTemplateTypeValueSonetDashOc12 string = "sonet-oc12"

	// InterfaceTemplateTypeValueSonetDashOc48 captures enum value "sonet-oc48"
	InterfaceTemplateTypeValueSonetDashOc48 string = "sonet-oc48"

	// InterfaceTemplateTypeValueSonetDashOc192 captures enum value "sonet-oc192"
	InterfaceTemplateTypeValueSonetDashOc192 string = "sonet-oc192"

	// InterfaceTemplateTypeValueSonetDashOc768 captures enum value "sonet-oc768"
	InterfaceTemplateTypeValueSonetDashOc768 string = "sonet-oc768"

	// InterfaceTemplateTypeValueSonetDashOc1920 captures enum value "sonet-oc1920"
	InterfaceTemplateTypeValueSonetDashOc1920 string = "sonet-oc1920"

	// InterfaceTemplateTypeValueSonetDashOc3840 captures enum value "sonet-oc3840"
	InterfaceTemplateTypeValueSonetDashOc3840 string = "sonet-oc3840"

	// InterfaceTemplateTypeValueNr1gfcDashSfp captures enum value "1gfc-sfp"
	InterfaceTemplateTypeValueNr1gfcDashSfp string = "1gfc-sfp"

	// InterfaceTemplateTypeValueNr2gfcDashSfp captures enum value "2gfc-sfp"
	InterfaceTemplateTypeValueNr2gfcDashSfp string = "2gfc-sfp"

	// InterfaceTemplateTypeValueNr4gfcDashSfp captures enum value "4gfc-sfp"
	InterfaceTemplateTypeValueNr4gfcDashSfp string = "4gfc-sfp"

	// InterfaceTemplateTypeValueNr8gfcDashSfpp captures enum value "8gfc-sfpp"
	InterfaceTemplateTypeValueNr8gfcDashSfpp string = "8gfc-sfpp"

	// InterfaceTemplateTypeValueNr16gfcDashSfpp captures enum value "16gfc-sfpp"
	InterfaceTemplateTypeValueNr16gfcDashSfpp string = "16gfc-sfpp"

	// InterfaceTemplateTypeValueNr32gfcDashSfp28 captures enum value "32gfc-sfp28"
	InterfaceTemplateTypeValueNr32gfcDashSfp28 string = "32gfc-sfp28"

	// InterfaceTemplateTypeValueNr64gfcDashQsfpp captures enum value "64gfc-qsfpp"
	InterfaceTemplateTypeValueNr64gfcDashQsfpp string = "64gfc-qsfpp"

	// InterfaceTemplateTypeValueNr128gfcDashQsfp28 captures enum value "128gfc-qsfp28"
	InterfaceTemplateTypeValueNr128gfcDashQsfp28 string = "128gfc-qsfp28"

	// InterfaceTemplateTypeValueInfinibandDashSdr captures enum value "infiniband-sdr"
	InterfaceTemplateTypeValueInfinibandDashSdr string = "infiniband-sdr"

	// InterfaceTemplateTypeValueInfinibandDashDdr captures enum value "infiniband-ddr"
	InterfaceTemplateTypeValueInfinibandDashDdr string = "infiniband-ddr"

	// InterfaceTemplateTypeValueInfinibandDashQdr captures enum value "infiniband-qdr"
	InterfaceTemplateTypeValueInfinibandDashQdr string = "infiniband-qdr"

	// InterfaceTemplateTypeValueInfinibandDashFdr10 captures enum value "infiniband-fdr10"
	InterfaceTemplateTypeValueInfinibandDashFdr10 string = "infiniband-fdr10"

	// InterfaceTemplateTypeValueInfinibandDashFdr captures enum value "infiniband-fdr"
	InterfaceTemplateTypeValueInfinibandDashFdr string = "infiniband-fdr"

	// InterfaceTemplateTypeValueInfinibandDashEdr captures enum value "infiniband-edr"
	InterfaceTemplateTypeValueInfinibandDashEdr string = "infiniband-edr"

	// InterfaceTemplateTypeValueInfinibandDashHdr captures enum value "infiniband-hdr"
	InterfaceTemplateTypeValueInfinibandDashHdr string = "infiniband-hdr"

	// InterfaceTemplateTypeValueInfinibandDashNdr captures enum value "infiniband-ndr"
	InterfaceTemplateTypeValueInfinibandDashNdr string = "infiniband-ndr"

	// InterfaceTemplateTypeValueInfinibandDashXdr captures enum value "infiniband-xdr"
	InterfaceTemplateTypeValueInfinibandDashXdr string = "infiniband-xdr"

	// InterfaceTemplateTypeValueT1 captures enum value "t1"
	InterfaceTemplateTypeValueT1 string = "t1"

	// InterfaceTemplateTypeValueE1 captures enum value "e1"
	InterfaceTemplateTypeValueE1 string = "e1"

	// InterfaceTemplateTypeValueT3 captures enum value "t3"
	InterfaceTemplateTypeValueT3 string = "t3"

	// InterfaceTemplateTypeValueE3 captures enum value "e3"
	InterfaceTemplateTypeValueE3 string = "e3"

	// InterfaceTemplateTypeValueXdsl captures enum value "xdsl"
	InterfaceTemplateTypeValueXdsl string = "xdsl"

	// InterfaceTemplateTypeValueDocsis captures enum value "docsis"
	InterfaceTemplateTypeValueDocsis string = "docsis"

	// InterfaceTemplateTypeValueGpon captures enum value "gpon"
	InterfaceTemplateTypeValueGpon string = "gpon"

	// InterfaceTemplateTypeValueXgDashPon captures enum value "xg-pon"
	InterfaceTemplateTypeValueXgDashPon string = "xg-pon"

	// InterfaceTemplateTypeValueXgsDashPon captures enum value "xgs-pon"
	InterfaceTemplateTypeValueXgsDashPon string = "xgs-pon"

	// InterfaceTemplateTypeValueNgDashPon2 captures enum value "ng-pon2"
	InterfaceTemplateTypeValueNgDashPon2 string = "ng-pon2"

	// InterfaceTemplateTypeValueEpon captures enum value "epon"
	InterfaceTemplateTypeValueEpon string = "epon"

	// InterfaceTemplateTypeValueNr10gDashEpon captures enum value "10g-epon"
	InterfaceTemplateTypeValueNr10gDashEpon string = "10g-epon"

	// InterfaceTemplateTypeValueCiscoDashStackwise captures enum value "cisco-stackwise"
	InterfaceTemplateTypeValueCiscoDashStackwise string = "cisco-stackwise"

	// InterfaceTemplateTypeValueCiscoDashStackwiseDashPlus captures enum value "cisco-stackwise-plus"
	InterfaceTemplateTypeValueCiscoDashStackwiseDashPlus string = "cisco-stackwise-plus"

	// InterfaceTemplateTypeValueCiscoDashFlexstack captures enum value "cisco-flexstack"
	InterfaceTemplateTypeValueCiscoDashFlexstack string = "cisco-flexstack"

	// InterfaceTemplateTypeValueCiscoDashFlexstackDashPlus captures enum value "cisco-flexstack-plus"
	InterfaceTemplateTypeValueCiscoDashFlexstackDashPlus string = "cisco-flexstack-plus"

	// InterfaceTemplateTypeValueCiscoDashStackwiseDash80 captures enum value "cisco-stackwise-80"
	InterfaceTemplateTypeValueCiscoDashStackwiseDash80 string = "cisco-stackwise-80"

	// InterfaceTemplateTypeValueCiscoDashStackwiseDash160 captures enum value "cisco-stackwise-160"
	InterfaceTemplateTypeValueCiscoDashStackwiseDash160 string = "cisco-stackwise-160"

	// InterfaceTemplateTypeValueCiscoDashStackwiseDash320 captures enum value "cisco-stackwise-320"
	InterfaceTemplateTypeValueCiscoDashStackwiseDash320 string = "cisco-stackwise-320"

	// InterfaceTemplateTypeValueCiscoDashStackwiseDash480 captures enum value "cisco-stackwise-480"
	InterfaceTemplateTypeValueCiscoDashStackwiseDash480 string = "cisco-stackwise-480"

	// InterfaceTemplateTypeValueJuniperDashVcp captures enum value "juniper-vcp"
	InterfaceTemplateTypeValueJuniperDashVcp string = "juniper-vcp"

	// InterfaceTemplateTypeValueExtremeDashSummitstack captures enum value "extreme-summitstack"
	InterfaceTemplateTypeValueExtremeDashSummitstack string = "extreme-summitstack"

	// InterfaceTemplateTypeValueExtremeDashSummitstackDash128 captures enum value "extreme-summitstack-128"
	InterfaceTemplateTypeValueExtremeDashSummitstackDash128 string = "extreme-summitstack-128"

	// InterfaceTemplateTypeValueExtremeDashSummitstackDash256 captures enum value "extreme-summitstack-256"
	InterfaceTemplateTypeValueExtremeDashSummitstackDash256 string = "extreme-summitstack-256"

	// InterfaceTemplateTypeValueExtremeDashSummitstackDash512 captures enum value "extreme-summitstack-512"
	InterfaceTemplateTypeValueExtremeDashSummitstackDash512 string = "extreme-summitstack-512"

	// InterfaceTemplateTypeValueOther captures enum value "other"
	InterfaceTemplateTypeValueOther string = "other"
)

// prop value enum
func (m *InterfaceTemplateType) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceTemplateTypeTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InterfaceTemplateType) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("type"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueEnum("type"+"."+"value", "body", *m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this interface template type based on context it is used
func (m *InterfaceTemplateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceTemplateType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceTemplateType) UnmarshalBinary(b []byte) error {
	var res InterfaceTemplateType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
